import React, { useState, useEffect } from 'react';
import { X, Upload, Image, Type, Save, Plus, Minus } from 'lucide-react';
import { getPointsText } from '../utils/dateUtils';
import api from '../services/api';
import { showNotification } from '../utils/notifications';
import Checkbox from './ui/Checkbox';

export default function TokenEditModal({ isOpen, onClose, onSubmit, token = null }) {
  const [formData, setFormData] = useState({
    name: '',
    points: 1,
    conversionAmount: null,
    conversionTargetId: null,
    backgroundColor: '#9CA3AF',
    textColor: 'text-white',
    image: 'üéØ',
    imageFolder: 'gray',
    description: '',
    autoDistribution: false,
    autoDistributionPeriod: 'month',
    autoDistributionAmount: 1
  });
  
  const [displayBackgroundColor, setDisplayBackgroundColor] = useState('#9CA3AF');
  const [displayTextColor, setDisplayTextColor] = useState('#FFFFFF');
  const [existingTokens, setExistingTokens] = useState([]);
  const [availableFolders, setAvailableFolders] = useState([]);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [saving, setSaving] = useState(false);

  const periodOptions = [
    { value: 'week', label: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' },
    { value: 'month', label: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' },
    { value: 'quarter', label: '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ' },
    { value: 'half_year', label: '–†–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞' },
    { value: 'year', label: '–ï–∂–µ–≥–æ–¥–Ω–æ' }
  ];

  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π

  const generateRandomImage = async (folderOverride = null) => {
    try {
      const folder = folderOverride || formData.imageFolder || 'grey';
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É grey –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      const correctedFolder = folder === 'grey' ? 'grey' : folder;
      
      const response = await api.get(`/api/tokens/random-image?folder=${correctedFolder}`);
      if (response && response.imageUrl) {
        setFormData(prev => ({ ...prev, imageUrl: response.imageUrl }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }
  };

  const generateRandomDescription = () => {
    const descriptions = [
      "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
      "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!",
      "–ú–æ–ª–æ–¥–µ—Ü!",
      "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
      "–í—ã–¥–∞—é—â–∏–π—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
      "–ë–ª–µ—Å—Ç—è—â–µ!",
      "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!",
      "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞!",
      "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!",
      "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!"
    ];
    return descriptions[Math.floor(Math.random() * descriptions.length)];
  };

  const loadExistingTokens = async () => {
    try {
      const response = await api.getAdminTokens();
      setExistingTokens(response);
    } catch (error) {
      console.error('Error loading existing tokens:', error);
    }
  };

  const loadFolders = async () => {
    try {
      const response = await api.get('/api/tokens/folders');
      const folders = response || [];
      
      const mappedFolders = folders.map(folder => ({
        value: folder,
        label: folder.charAt(0).toUpperCase() + folder.slice(1)
      }));
      
      setAvailableFolders(mappedFolders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–ø–æ–∫:', error);
      setAvailableFolders([]);
    }
  };

  const getLighterColor = (hexColor) => {
    // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
    const hex = hexColor.replace('#', '');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // –û—Å–≤–µ—Ç–ª—è–µ–º –Ω–∞ 30%
    const lighterR = Math.min(255, Math.round(r + (255 - r) * 0.3));
    const lighterG = Math.min(255, Math.round(g + (255 - g) * 0.3));
    const lighterB = Math.min(255, Math.round(b + (255 - b) * 0.3));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ HEX
    const lighterHex = `#${lighterR.toString(16).padStart(2, '0')}${lighterG.toString(16).padStart(2, '0')}${lighterB.toString(16).padStart(2, '0')}`;
    
    return lighterHex;
  };

  const createGradientStyle = (baseColor) => {
    const lighterColor = getLighterColor(baseColor);
    return {
      background: `linear-gradient(135deg, ${baseColor} 0%, ${lighterColor} 100%)`
    };
  };

  const extractColorFromGradient = (gradientString) => {
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø—Ä–æ—Å—Ç–æ–π —Ü–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (gradientString.startsWith('#')) {
      return gradientString;
    }
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "bg-gradient-to-br from-[#6B7280] to-[#9CA3AF]"
    const match = gradientString.match(/from-\[#([A-Fa-f0-9]{6})\]/);
    return match ? `#${match[1]}` : '#6B7280';
  };

  const extractColorFromText = (textString) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "text-[#FFFFFF]"
    const match = textString.match(/text-\[#([A-Fa-f0-9]{6})\]/);
    return match ? `#${match[1]}` : '#FFFFFF';
  };

  useEffect(() => {
    const initializeForm = () => {
      if (token) {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è imageFolder
        let correctedImageFolder = token.imageFolder;
        if (correctedImageFolder === 'folders' || correctedImageFolder === 'gray') {
          correctedImageFolder = 'grey';
        }
        
        const formDataToSet = {
          name: token.name || '',
          description: token.description || '',
          points: token.points || 0,
          color: token.color || '#E42E0F',
          textColor: token.textColor || 'text-white',
          imageUrl: token.imageUrl || '',
          imageFolder: correctedImageFolder || 'grey',
          tokenType: token.tokenType || 'regular',
          isActive: token.isActive !== undefined ? token.isActive : true
        };
        
        setFormData(formDataToSet);
      } else {
        const newFormData = {
          name: '',
          description: '',
          points: 0,
          color: '#E42E0F',
          textColor: 'text-white',
          imageUrl: '',
          imageFolder: 'grey',
          tokenType: 'regular',
          isActive: true
        };
        
        setFormData(newFormData);
      }
    };

    if (isOpen) {
      initializeForm();
      loadExistingTokens();
      loadFolders();
    }
  }, [isOpen, token]);

  const getTokenTypeInfo = (formData) => {
    return {
      name: formData.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
      points: formData.points || 1,
      backgroundColor: formData.backgroundColor || '#9CA3AF',
      textColor: formData.textColor || 'text-white'
    };
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB = 10 * 1024 * 1024 bytes)
    const maxSize = 10 * 1024 * 1024;
    if (file.size > maxSize) {
      showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(file.size / 1024 / 1024 * 100) / 100}MB`, 'error');
      return;
    }

    try {
      setUploadingImage(true);
      const formData = new FormData();
      formData.append('image', file);

      const response = await api.uploadTokenImage(formData);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
      let imageUrl;
      if (response.data?.imageUrl) {
        imageUrl = response.data.imageUrl;
      } else if (response.imageUrl) {
        imageUrl = response.imageUrl;
      } else if (typeof response === 'string') {
        imageUrl = response;
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      setFormData(prev => ({
        ...prev,
        image: imageUrl
      }));

      showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', 'success');
    } catch (error) {
      console.error('Error uploading image:', error);
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + error.message, 'error');
    } finally {
      setUploadingImage(false);
    }
  };

  const handleClearImage = () => {
    setFormData(prev => ({
      ...prev,
      image: 'üéØ'
    }));
  };

  const handleRandomImage = async (folder) => {
    const randomImage = await generateRandomImage(folder);
    setFormData(prev => ({ 
      ...prev, 
      image: randomImage || 'üéØ' // –ï—Å–ª–∏ null, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setSaving(true);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–∑—É
      const tokenData = {
        name: formData.name,
        points: formData.points,
        value: formData.points, // –ò—Å–ø–æ–ª—å–∑—É–µ–º points –∫–∞–∫ value
        color: 'gray', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
        conversionAmount: formData.conversionAmount,
        conversionTargetId: formData.conversionTargetId,
        backgroundColor: formData.backgroundColor,
        textColor: formData.textColor,
        image: formData.image,
        imageFolder: formData.imageFolder,
        description: formData.description,
        autoDistribution: formData.autoDistribution,
        autoDistributionPeriod: formData.autoDistributionPeriod,
        autoDistributionAmount: formData.autoDistributionAmount
      };
      
      if (token?.id) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        await api.updateAdminToken(token.id, tokenData);
        showNotification('–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        await api.createAdminToken(tokenData);
        showNotification('–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω!', 'success');
      }
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
      api.clearCacheFor('/admin/tokens');
      
      onSubmit?.();
      onClose();
    } catch (error) {
      console.error('Error saving token:', error);
      showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞', 'error');
    } finally {
      setSaving(false);
    }
  };

  const handleClose = () => {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    setFormData({
      name: '',
      points: 1,
      conversionAmount: null,
      conversionTargetId: null,
      backgroundColor: '#9CA3AF',
      textColor: 'text-white',
      image: 'üéØ',
      imageFolder: 'grey',
      description: '',
      autoDistribution: false,
      autoDistributionPeriod: 'month',
      autoDistributionAmount: 1
    });
    setDisplayBackgroundColor('#9CA3AF');
    setDisplayTextColor('#FFFFFF');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[999999]">
      <div className="bg-white rounded-[15px] w-full max-w-2xl mx-4 max-h-[90vh] flex flex-col overflow-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-6 border-b border-gray/20">
          <h3 className="text-lg font-semibold text-dark">
            {token ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω'}
          </h3>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <div className="flex-1 overflow-y-auto p-6">
          <form id="token-form" className="space-y-4" onSubmit={handleSubmit}>
            {/* –ü—Ä–µ–≤—å—é —Ç–æ–∫–µ–Ω–∞ */}
            <div className="flex justify-center mb-6">
              <div className="w-full flex flex-col items-center shadow-lg" style={{ 
                aspectRatio: '1/1.414', 
                height: 'auto', 
                borderRadius: '0.5rem', 
                maxWidth: '320px',
                ...createGradientStyle(formData.backgroundColor)
              }}>
                {formData.image && formData.image !== 'üéØ' && (formData.image.startsWith('http') || formData.image.startsWith('/uploads/')) ? (
                  <img 
                    src={formData.image.startsWith('http') ? formData.image : `${formData.image}`}
                    alt="" 
                    style={{ 
                      margin: '2rem',
                      border: '2px solid rgba(255, 255, 255, 0.8)',
                      borderRadius: '0.5rem',
                      boxSizing: 'border-box',
                      backgroundColor: 'rgba(255, 255, 255, 0.7)',
                      width: 'calc(100% - 4rem)',
                      aspectRatio: '1/1',
                      objectFit: 'contain'
                    }}
                    crossOrigin="anonymous"
                    onError={(e) => {
                      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —ç–º–æ–¥–∑–∏
                      e.target.style.display = 'none';
                      const emojiDiv = e.target.nextSibling;
                      if (emojiDiv) {
                        emojiDiv.style.display = 'flex';
                      }
                    }}
                  />
                ) : null}
                <div 
                  className="flex items-center justify-center"
                  style={{ 
                    margin: '2rem',
                    border: '2px solid rgba(255, 255, 255, 0.8)',
                    borderRadius: '0.5rem',
                    backgroundColor: 'rgba(255, 255, 255, 0.7)',
                    width: 'calc(100% - 4rem)',
                    aspectRatio: '1/1',
                    fontSize: '10rem',
                    display: formData.image && formData.image !== 'üéØ' && (formData.image.startsWith('http') || formData.image.startsWith('/uploads/')) ? 'none' : 'flex'
                  }}
                >
                  {formData.image && !formData.image.startsWith('http') && !formData.image.startsWith('/uploads/') ? formData.image : 'üéØ'}
                </div>
                <div className="w-full flex flex-col flex-1">
                  {formData.description && (
                    <div className="flex-1 flex items-center justify-center" style={{ paddingLeft: '2rem', paddingRight: '2rem' }}>
                      <h3 
                        className="font-bold leading-tight text-center" 
                        style={{ 
                          fontSize: '1.3rem', 
                          display: '-webkit-box', 
                          WebkitLineClamp: 2, 
                          WebkitBoxOrient: 'vertical', 
                          overflow: 'hidden',
                          color: formData.textColor && formData.textColor.startsWith('#') ? formData.textColor : 
                                 formData.textColor === 'text-white' ? '#ffffff' : 
                                 formData.textColor === 'text-black' ? '#000000' : '#ffffff'
                        }}
                      >
                        {formData.description}
                      </h3>
                    </div>
                  )}
                  <div className="flex items-center justify-center" style={{ paddingLeft: '4px', paddingRight: '4px', paddingBottom: '2rem' }}>
                    <h2 
                      className="font-bold" 
                      style={{ 
                        fontSize: '1.5rem',
                        color: formData.textColor && formData.textColor.startsWith('#') ? formData.textColor : 
                               formData.textColor === 'text-white' ? '#ffffff' : 
                               formData.textColor === 'text-black' ? '#000000' : '#ffffff'
                      }}
                    >
                      {getPointsText(formData.points)}
                    </h2>
                  </div>
                </div>
              </div>
            </div>

            {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ *</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ *</label>
                <input
                  type="number"
                  value={formData.points}
                  onChange={(e) => setFormData(prev => ({ ...prev, points: parseInt(e.target.value) || 1 }))}
                  className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                  min="1"
                  required
                />
              </div>
            </div>

            {/* –ö–æ–Ω–≤–µ—Ä—Å–∏—è */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</label>
                <input
                  type="number"
                  value={formData.conversionAmount || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, conversionAmount: e.target.value ? parseInt(e.target.value) : null }))}
                  className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                  min="1"
                  placeholder="–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤</label>
                <select
                  value={formData.conversionTargetId || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, conversionTargetId: e.target.value ? parseInt(e.target.value) : null }))}
                  className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                >
                  <option value="">–ù–µ –≤—ã–±—Ä–∞–Ω–æ</option>
                  {existingTokens.map(token => (
                    <option key={token.id} value={token.id}>
                      {token.name} ({getPointsText(token.points || token.value)})
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* –¶–≤–µ—Ç–∞ */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¶–≤–µ—Ç —Ñ–æ–Ω–∞</label>
                <div className="relative">
                  <input
                    type="text"
                    value={displayBackgroundColor}
                    onChange={(e) => {
                      const color = e.target.value;
                      setDisplayBackgroundColor(color);
                      setFormData(prev => ({ 
                        ...prev, 
                        backgroundColor: color
                      }));
                    }}
                    className="w-full px-3 py-2 pr-10 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                    placeholder="#6B7280"
                  />
                  <input
                    type="color"
                    value={displayBackgroundColor}
                    onChange={(e) => {
                      const color = e.target.value;
                      setDisplayBackgroundColor(color);
                      setFormData(prev => ({ 
                        ...prev, 
                        backgroundColor: color
                      }));
                    }}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 w-6 h-6 border border-gray/300 rounded cursor-pointer"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label>
                <div className="relative">
                  <input
                    type="text"
                    value={displayTextColor}
                    onChange={(e) => {
                      const color = e.target.value;
                      setDisplayTextColor(color);
                      setFormData(prev => ({ 
                        ...prev, 
                        textColor: color
                      }));
                    }}
                    className="w-full px-3 py-2 pr-10 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                    placeholder="#FFFFFF"
                  />
                  <input
                    type="color"
                    value={displayTextColor}
                    onChange={(e) => {
                      const color = e.target.value;
                      setDisplayTextColor(color);
                      setFormData(prev => ({ 
                        ...prev, 
                        textColor: color
                      }));
                    }}
                    className="absolute right-2 top-1/2 transform -translate-y-1/2 w-6 h-6 border border-gray/300 rounded cursor-pointer"
                  />
                </div>
              </div>
            </div>

            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</label>
              <p className="text-xs text-gray-500 mb-2">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB</p>
              <div className="flex items-center gap-2">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="token-image-upload"
                />
                <label
                  htmlFor="token-image-upload"
                  className="flex-1 bg-gray-100 text-gray-700 px-3 py-2 rounded-[8px] hover:bg-gray-200 cursor-pointer flex items-center justify-center gap-2 transition-colors"
                >
                  {uploadingImage ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600"></div>
                      –ó–∞–≥—Ä—É–∑–∫–∞...
                    </>
                  ) : (
                    <>
                      <Upload className="w-4 h-4" />
                      –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </>
                  )}
                </label>
                {formData.image && (
                  <button
                    type="button"
                    onClick={handleClearImage}
                    className="px-3 py-2 text-gray-500 hover:text-gray-700 transition-colors"
                    title="–û—á–∏—Å—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                  >
                    <X className="w-4 h-4" />
                  </button>
                )}
              </div>
            </div>

            {/* –°–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</label>
              <div className="grid grid-cols-3 gap-2">
                {availableFolders.map(folder => (
                  <button
                    key={folder.value}
                    type="button"
                    onClick={() => handleRandomImage(folder.value)}
                    className="px-3 py-2 text-sm border border-gray/20 rounded-[8px] hover:bg-gray/10 transition-colors capitalize"
                  >
                    {folder.label}
                  </button>
                ))}
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary resize-none"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"
                rows="3"
              />
            </div>

            {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
            <div className="border-t border-gray/20 pt-4">
              <div className="mb-4">
                <div className="flex items-center justify-between">
                <div>
                  <h4 className="text-sm font-medium text-gray-900">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h4>
                  <p className="text-xs text-gray-500">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º</p>
                </div>
                  <Checkbox
                    checked={formData.autoDistribution}
                    onChange={(e) => setFormData(prev => ({ ...prev, autoDistribution: e.target.checked }))}
                  />
                </div>
              </div>

              {formData.autoDistribution && (
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–ü–µ—Ä–∏–æ–¥</label>
                    <select
                      value={formData.autoDistributionPeriod}
                      onChange={(e) => setFormData(prev => ({ ...prev, autoDistributionPeriod: e.target.value }))}
                      className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                    >
                      {periodOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                    <input
                      type="number"
                      value={formData.autoDistributionAmount}
                      onChange={(e) => setFormData(prev => ({ ...prev, autoDistributionAmount: parseInt(e.target.value) || 1 }))}
                      className="w-full px-3 py-2 border border-gray/20 rounded-[8px] focus:outline-none focus:ring-2 focus:ring-primary"
                      min="1"
                    />
                  </div>
                </div>
              )}
            </div>
          </form>
        </div>

        {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É */}
        <div className="p-6 border-t border-gray/20 bg-white">
          <div className="flex gap-3">
            <button
              type="button"
              onClick={handleClose}
              className="flex-1 px-4 py-2 border border-gray/20 rounded-[8px] text-gray-700 hover:bg-gray/10 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              form="token-form"
              disabled={saving}
              className="flex-1 px-4 py-2 bg-primary text-white rounded-[8px] hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              <Save className="w-4 h-4" />
              {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (token ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
} 