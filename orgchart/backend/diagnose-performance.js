const { Sequelize } = require('sequelize');
const config = require('./config/database');

async function diagnosePerformance() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  const sequelize = new Sequelize(config.development);
  
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
    const slowQueries = await sequelize.query(`
      SELECT 
        sql_text,
        COUNT(*) as execution_count,
        AVG(duration) as avg_duration,
        MAX(duration) as max_duration,
        SUM(duration) as total_duration
      FROM performance_schema.events_statements_history_long 
      WHERE duration > 1000000
      GROUP BY sql_text
      ORDER BY avg_duration DESC
      LIMIT 10
    `, { type: Sequelize.QueryTypes.SELECT });
    
    if (slowQueries.length > 0) {
      console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
      slowQueries.forEach((query, index) => {
        console.log(`${index + 1}. ${query.sql_text.substring(0, 100)}...`);
        console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${query.avg_duration}–º—Å, –ú–∞–∫—Å–∏–º—É–º: ${query.max_duration}–º—Å`);
      });
    } else {
      console.log('‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü
    console.log('\n3. –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü...');
    const tableSizes = await sequelize.query(`
      SELECT 
        table_name,
        table_rows,
        ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)'
      FROM information_schema.tables 
      WHERE table_schema = '${config.development.database}'
      ORDER BY (data_length + index_length) DESC
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log('üìä –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    tableSizes.forEach(table => {
      console.log(`   ${table.table_name}: ${table['Size (MB)']}MB (${table.table_rows} —Å—Ç—Ä–æ–∫)`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = await sequelize.query(`
      SELECT 
        table_name,
        index_name,
        column_name
      FROM information_schema.statistics 
      WHERE table_schema = '${config.development.database}'
      ORDER BY table_name, index_name
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log('üîç –ò–Ω–¥–µ–∫—Å—ã:');
    const tableIndexes = {};
    indexes.forEach(index => {
      if (!tableIndexes[index.table_name]) {
        tableIndexes[index.table_name] = [];
      }
      tableIndexes[index.table_name].push(index.index_name);
    });
    
    Object.entries(tableIndexes).forEach(([table, tableIndexes]) => {
      const uniqueIndexes = [...new Set(tableIndexes)];
      console.log(`   ${table}: ${uniqueIndexes.join(', ')}`);
    });
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    console.log('\n5. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    const connections = await sequelize.query(`
      SELECT 
        COUNT(*) as active_connections,
        COUNT(DISTINCT user) as unique_users
      FROM information_schema.processlist 
      WHERE db = '${config.development.database}'
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connections[0].active_connections}`);
    console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${connections[0].unique_users}`);
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ config/database.js');
    console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ API');
    console.log('   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  } finally {
    await sequelize.close();
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnosePerformance().catch(console.error); 