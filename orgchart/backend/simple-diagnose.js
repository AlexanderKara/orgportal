const { Sequelize } = require('sequelize');
const config = require('./config/database');

async function simpleDiagnose() {
  console.log('üîç –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n');
  
  const sequelize = new Sequelize(config.development);
  
  try {
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü
    console.log('\n1. –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü...');
    const tableSizes = await sequelize.query(`
      SELECT 
        table_name,
        table_rows,
        ROUND(((data_length + index_length) / 1024 / 1024), 2) AS 'Size (MB)'
      FROM information_schema.tables 
      WHERE table_schema = '${config.development.database}'
      ORDER BY (data_length + index_length) DESC
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log('üìä –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    tableSizes.forEach(table => {
      console.log(`   ${table.table_name}: ${table['Size (MB)']}MB (${table.table_rows} —Å—Ç—Ä–æ–∫)`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = await sequelize.query(`
      SELECT 
        table_name,
        index_name,
        column_name
      FROM information_schema.statistics 
      WHERE table_schema = '${config.development.database}'
      ORDER BY table_name, index_name
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log('üîç –ò–Ω–¥–µ–∫—Å—ã:');
    const tableIndexes = {};
    indexes.forEach(index => {
      if (!tableIndexes[index.table_name]) {
        tableIndexes[index.table_name] = [];
      }
      tableIndexes[index.table_name].push(index.index_name);
    });
    
    Object.entries(tableIndexes).forEach(([table, tableIndexes]) => {
      const uniqueIndexes = [...new Set(tableIndexes)];
      console.log(`   ${table}: ${uniqueIndexes.join(', ')}`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    console.log('\n3. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    const connections = await sequelize.query(`
      SELECT 
        COUNT(*) as active_connections,
        COUNT(DISTINCT user) as unique_users
      FROM information_schema.processlist 
      WHERE db = '${config.development.database}'
    `, { type: Sequelize.QueryTypes.SELECT });
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connections[0].active_connections}`);
    console.log(`üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${connections[0].unique_users}`);
    
    // 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...');
    
    const startTime = Date.now();
    await sequelize.query('SELECT 1');
    const simpleQueryTime = Date.now() - startTime;
    console.log(`   –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: ${simpleQueryTime}–º—Å`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log('\n5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...');
    const tables = ['employees', 'departments', 'products', 'tokens', 'notifications'];
    
    for (const table of tables) {
      try {
        const result = await sequelize.query(`SELECT COUNT(*) as count FROM ${table}`, 
          { type: Sequelize.QueryTypes.SELECT });
        console.log(`   ${table}: ${result[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`   ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞`);
      }
    }
    
    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\n6. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:');
    console.log('   ‚Ä¢ –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö');
    console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª—è—Ö');
    console.log('   ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (—É–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥)');
    console.log('   ‚Ä¢ –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å JOIN');
    console.log('   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
    console.log('   ‚Ä¢ –ú–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è Node.js –ø—Ä–æ—Ü–µ—Å—Å–∞');
    
    console.log('\n7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–ª—è');
    console.log('   ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ');
    console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å JOIN');
    console.log('   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Redis');
    console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –¥–ª—è Node.js');
    console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
  } finally {
    await sequelize.close();
  }
}

simpleDiagnose().catch(console.error); 