const { getTelegramBot } = require('./telegramBotInstance');
const { Employee, NotificationChat } = require('../models');

// Send authentication code via Telegram
const sendAuthCode = async (telegram, code) => {
  try {
    const bot = getTelegramBot();
    
    if (!bot) {
      console.log('Mock: Sending code via Telegram (bot not configured)');
      return true; // Return true for mock mode
    }

    // Clean telegram username (remove @ if present)
    const cleanTelegram = telegram.startsWith('@') ? telegram.substring(1) : telegram;
    
    const message = `–ü–æ—Ä—Ç–∞–ª Team-A

üîê –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <code>${code}</code>

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã!

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º`;

    // Try to send to stored chat ID from database first
    const employee = await Employee.findOne({ where: { telegram: telegram } });
    if (employee && employee.telegram_chat_id) {
      try {
        const result = await bot.sendMessage(employee.telegram_chat_id, message, {
          parse_mode: 'HTML'
        });
        
        // Delete auth code message after 2 minutes
        setTimeout(() => {
          bot.deleteMessage(employee.telegram_chat_id, result.message_id).catch(err => 
            console.log('Could not delete auth code message:', err.message)
          );
        }, 2 * 60 * 1000);
        
        return true;
      } catch (chatError) {
        // If stored chat ID fails, try username method
      }
    }

    // Try username method only if no stored chat ID
    if (!employee || !employee.telegram_chat_id) {
      try {
        const result = await bot.sendMessage(`@${cleanTelegram}`, message, {
          parse_mode: 'HTML'
        });

        // Delete auth code message after 2 minutes
        setTimeout(() => {
          bot.deleteMessage(result.chat.id, result.message_id).catch(err => 
            console.log('Could not delete auth code message:', err.message)
          );
        }, 2 * 60 * 1000);
        
        // Save chat ID to database for future use
        if (result.chat && result.chat.id) {
          await saveChatIdToDatabase(telegram, result.chat.id);
        }
        
        return true;
      } catch (usernameError) {
        // Try to send a helpful message to the user
        try {
          const helpMessage = `ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Team-A.

‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

üîß –†–µ—à–µ–Ω–∏–µ:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @atmsrvs_bot
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–Ω–æ–≤–∞

üìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
          
          const result = await bot.sendMessage(`@${cleanTelegram}`, helpMessage);
          
          // Delete help message after 2 minutes
          setTimeout(() => {
            bot.deleteMessage(result.chat.id, result.message_id).catch(err => 
              console.log('Could not delete help message:', err.message)
            );
          }, 2 * 60 * 1000);
        } catch (helpError) {
          console.error('Error sending help message:', helpError);
        }
        
        return { success: false, error: 'BOT_NOT_ADDED' };
      }
    }
    
    // If we have stored chat ID but it failed, return error
    return { success: false, error: 'BOT_NOT_ADDED' };
    
  } catch (error) {
    console.error('Telegram sending error:', error);
    
    // Check if user is not found in the application
    if (error.message && error.message.includes('User not found')) {
      const hrResponses = [
        '–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö! –ù–æ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –æ—Ç–¥–µ–ª–æ–º –∫–∞–¥—Ä–æ–≤ üòÑ',
        '–Ø –±–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–π, –Ω–æ –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ –º–Ω–æ–π –±–µ—Å–µ–¥–æ–≤–∞—Ç—å, –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ! üìã',
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤—É—é –∫–Ω–∏–∂–∫—É üìö',
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∞–º–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ HR —Å–∏—Å—Ç–µ–º–µ üëî',
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ onboarding –≤ –æ—Ç–¥–µ–ª–µ –∫–∞–¥—Ä–æ–≤ üè¢',
        '–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –ù–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–¥–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä üìù',
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ üè•',
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! –ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –æ—Ç–¥–µ–ª–µ –∫–∞–¥—Ä–æ–≤ üìã',
        '–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚ö°',
        '–†–∞–¥ –≤–∏–¥–µ—Ç—å! –ù–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ—Ç HR –æ—Ç–¥–µ–ª–∞ üîê'
      ];
      
      const randomResponse = hrResponses[Math.floor(Math.random() * hrResponses.length)];
      
      try {
        const bot = getTelegramBot();
        if (bot) {
          const hrMessage = `${randomResponse}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.`;
          
          const result = await bot.sendMessage(telegram.startsWith('@') ? telegram : `@${telegram}`, hrMessage);
        
        // Delete HR response message after 2 minutes
        setTimeout(() => {
          bot.deleteMessage(result.chat.id, result.message_id).catch(err => 
            console.log('Could not delete HR response message:', err.message)
          );
        }, 2 * 60 * 1000);
        }
      } catch (sendError) {
        console.error('Error sending HR response:', sendError);
      }
      
      return false;
    }
    
    return false;
  }
};

// Store chat IDs for users
const userChatIds = new Map();

// Helper function to silently delete messages
const silentDeleteMessage = (bot, chatId, messageId) => {
  setTimeout(() => {
    bot.deleteMessage(chatId, messageId).catch(err => {
      console.log('Could not delete message:', err.message);
    });
  }, 2 * 60 * 1000); // 2 minutes
};

// Function to save chat ID to database and create notification chat record
const saveChatIdToDatabase = async (telegram, chatId) => {
  try {
    const employee = await Employee.findOne({ where: { telegram: telegram } });
    if (employee) {
      // Update employee's telegram_chat_id
      await employee.update({ telegram_chat_id: chatId });
      
      // Check if notification chat record already exists
      const existingChat = await NotificationChat.findOne({ where: { chatId: chatId.toString() } });
      
      if (!existingChat) {
        // Create new notification chat record
        const chatName = `${employee.first_name} ${employee.last_name} (${telegram})`;
        await NotificationChat.create({
          name: chatName,
          type: 'chat',
          chatId: chatId.toString(),
          isActive: true,
          status: 'active',
          commands: {
            notifications: true,
            birthdays: true,
            vacations: true,
            help: true,
            auth: true
          },
          allowedUsers: [],
          settings: {},
          lastActivity: new Date()
        });
      }
      
      return true;
    }
    return false;
  } catch (error) {
    console.error('Error saving chat ID to database:', error);
    return false;
  }
};

// Get all stored chat IDs from database
const getAllStoredChatIds = async () => {
  try {
    const employees = await Employee.findAll({
      where: {
        telegram_chat_id: {
          [require('sequelize').Op.not]: null
        }
      },
      attributes: ['telegram', 'telegram_chat_id']
    });

    const chatIdsMap = new Map();
    employees.forEach(emp => {
      chatIdsMap.set(emp.telegram, emp.telegram_chat_id);
    });

    return chatIdsMap;
  } catch (error) {
    console.error('Error getting stored chat IDs:', error);
    return new Map();
  }
};

// Get stored chat IDs (for debugging)
const getStoredChatIds = async () => {
  try {
    const chatIdsMap = await getAllStoredChatIds();
    return Object.fromEntries(chatIdsMap);
  } catch (error) {
    console.error('Error getting stored chat IDs:', error);
    return {};
  }
};

module.exports = {
  sendAuthCode,
  getStoredChatIds,
  getAllStoredChatIds,
  saveChatIdToDatabase
};