const TelegramBot = require('node-telegram-bot-api');
const { Employee, NotificationChat, Template } = require('../models');
const { createCanvas, loadImage } = require('canvas');
const path = require('path');
const fs = require('fs');

let botInstance = null;
let isInitialized = false;

// –ö–µ—à –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
const telegramAvatarCache = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã Telegram
async function getTelegramUserAvatar(chatId, userId) {
  try {
    const cacheKey = `${chatId}_${userId}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (telegramAvatarCache.has(cacheKey)) {
      const cached = telegramAvatarCache.get(cacheKey);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à (24 —á–∞—Å–∞)
      if (Date.now() - cached.timestamp < 24 * 60 * 60 * 1000) {
        return cached.avatarUrl;
      }
    }

    const bot = getTelegramBot();
    if (!bot) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–π (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π chatId)
    const isGroup = chatId < 0;
    
    if (isGroup) {
      // –î–ª—è –≥—Ä—É–ø–ø –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
      try {
        const chat = await bot.getChat(chatId);
        
        if (chat.photo) {
          const file = await bot.getFile(chat.photo.big_file_id);
          const avatarUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
          
          // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          telegramAvatarCache.set(cacheKey, {
            avatarUrl,
            timestamp: Date.now()
          });
          
          return avatarUrl;
        } else {
          return null;
        }
      } catch (error) {
        console.log(`Error getting group chat info for ${chatId}:`, error.message);
      }
    } else {
      // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ getChat
      try {
        const chat = await bot.getChat(chatId);
        
        if (chat.photo) {
          const file = await bot.getFile(chat.photo.big_file_id);
          const avatarUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
          
          // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          telegramAvatarCache.set(cacheKey, {
            avatarUrl,
            timestamp: Date.now()
          });
          
          return avatarUrl;
        } else {
          // Fallback - –ø—Ä–æ–±—É–µ–º getUserProfilePhotos
          try {
            const userProfilePhotos = await bot.getUserProfilePhotos(userId, { limit: 1 });
            
            if (userProfilePhotos.total_count > 0) {
              const photo = userProfilePhotos.photos[0][0];
              const file = await bot.getFile(photo.file_id);
              const avatarUrl = `https://api.telegram.org/file/bot${bot.token}/${file.file_path}`;
              
              // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              telegramAvatarCache.set(cacheKey, {
                avatarUrl,
                timestamp: Date.now()
              });
              
              return avatarUrl;
            }
          } catch (fallbackError) {
            console.log(`Error in getUserProfilePhotos fallback:`, fallbackError.message);
          }
        }
      } catch (error) {
        console.log(`Error getting private chat info for ${chatId}:`, error.message);
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error in getTelegramUserAvatar:', error);
    return null;
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
const cleanupAvatarCache = () => {
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;
  
  for (const [key, value] of telegramAvatarCache.entries()) {
    if (now - value.timestamp > oneDay) {
      telegramAvatarCache.delete(key);
    }
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupAvatarCache, 6 * 60 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const createCorporateImage = async (title) => {
  const canvas = createCanvas(800, 400);
  const ctx = canvas.getContext('2d');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–ª—ã–π –ª–æ–≥–æ—Ç–∏–ø
    const logoPath = path.join(__dirname, '../A_logo_w.png');
    const logo = await loadImage(logoPath);
    
    // –§–æ–Ω - –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö
    const gradient = ctx.createLinearGradient(0, 0, 800, 400);
    gradient.addColorStop(0, '#E42E0F'); // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
    gradient.addColorStop(1, '#C41E3A'); // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 400);

    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É
    const logoSize = 80;
    const logoX = (800 - logoSize) / 2; // —Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    const logoY = 60;
    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    ctx.fillStyle = 'white';
    ctx.font = 'bold 48px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(title, 400, 200);

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.font = '24px Arial, sans-serif';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.fillText('Team-A Portal', 400, 280);

  } catch (error) {
    console.error('Error loading logo:', error);
    
    // Fallback –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞
    const gradient = ctx.createLinearGradient(0, 0, 800, 400);
    gradient.addColorStop(0, '#E42E0F');
    gradient.addColorStop(1, '#C41E3A');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 800, 400);

    // –¢–µ–∫—Å—Ç
    ctx.fillStyle = 'white';
    ctx.font = 'bold 48px Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(title, 400, 200);

    ctx.font = '24px Arial, sans-serif';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
    ctx.fillText('Team-A Portal', 400, 280);
  }

  return canvas.toBuffer();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
const getTemplateMessage = async (templateName, variables = {}) => {
  try {
    const template = await Template.findOne({ 
      where: { name: templateName, status: 'active' } 
    });
    
    if (!template) {
      return null;
    }
    
    let message = template.content;
    
    // Replace variables
    Object.keys(variables).forEach(key => {
      const placeholder = `%${key}%`;
      message = message.replace(new RegExp(placeholder, 'g'), variables[key]);
    });
    
    return message;
  } catch (error) {
    console.error('Error getting template message:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const saveChatIdToDatabase = async (telegram, chatId) => {
  try {
    const employee = await Employee.findOne({ where: { telegram: telegram } });
    if (employee) {
      // Update employee's telegram_chat_id
      await employee.update({ telegram_chat_id: chatId });
      
      // Check if notification chat record already exists
      const existingChat = await NotificationChat.findOne({ 
        where: { chatId: chatId.toString() } 
      });
      
      if (!existingChat) {
        // Create new notification chat record
        await NotificationChat.create({
          chatId: chatId.toString(),
          chat_name: `${employee.first_name} ${employee.last_name}`,
          chat_type: 'private',
          employee_id: employee.id,
          status: 'active'
        });
      } else {
        console.log(`Notification chat record already exists for chat ${chatId}`);
      }
      
      return true;
    } else {
      return false;
    }
  } catch (error) {
    console.error('Error saving chat ID to database:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
const createGroupNotificationChat = async (chatId, chatName, chatType) => {
  try {
    console.log(`Creating group notification chat: ${chatId}, ${chatName}, ${chatType}`);
    
    // Check if notification chat record already exists
    const existingChat = await NotificationChat.findOne({ 
      where: { chatId: chatId.toString() } 
    });
    
    if (!existingChat) {
      // Create new group notification chat record
      await NotificationChat.create({
        chatId: chatId.toString(),
        chat_name: chatName,
        chat_type: chatType,
        status: 'active'
      });
      console.log(`Created new group notification chat record for chat ${chatId}`);
      return true;
    } else {
      console.log(`Group notification chat record already exists for chat ${chatId}`);
      return true;
    }
  } catch (error) {
    console.error('Error creating group notification chat:', error);
    return false;
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
const setupBotCommands = (bot) => {
  bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
    { command: '/status', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' },
    { command: '/link', description: '–°–≤—è–∑–∞—Ç—å —á–∞—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º' },
    { command: '/chatid', description: '–ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞' }
  ]);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
const setupBotHandlers = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    const chatName = msg.chat.title || `${msg.chat.first_name} ${msg.chat.last_name || ''}`.trim();
    
    const welcomeMessage = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Team-A Portal!

–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã Team-A.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/link - –°–≤—è–∑–∞—Ç—å —á–∞—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
/chatid - –ü–æ–∫–∞–∑–∞—Ç—å ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞

üîó –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à Telegram username –≤ –ø–æ–ª–µ "Telegram" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞.`;
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageBuffer = await createCorporateImage('–ü—Ä–∏–≤–µ—Ç!');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
      await bot.sendPhoto(chatId, imageBuffer, {
        caption: welcomeMessage,
        parse_mode: 'HTML',
        filename: 'welcome.png'
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (chatType === 'private') {
        // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ username
        const username = msg.from.username;
        if (username) {
          await saveChatIdToDatabase(`@${username}`, chatId);
        }
      } else {
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await createGroupNotificationChat(chatId, chatName, chatType);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø
        try {
          const groupImageBuffer = await createCorporateImage('–ë–æ—Ç –≤ –≥—Ä—É–ø–ø–µ!');
          await bot.sendPhoto(chatId, groupImageBuffer, {
            caption: `‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ "${chatName}"\n\n–¢–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã Team-A.`,
            parse_mode: 'HTML',
            filename: 'group-connected.png'
          });
        } catch (groupImageError) {
          console.error('Error sending group image:', groupImageError);
        }
      }
    } catch (error) {
      console.error('Error handling /start command:', error);
      // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      try {
        await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'HTML' });
      } catch (fallbackError) {
        console.error('Error sending fallback message:', fallbackError);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    
    const helpMessage = `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª Team-A
2. –í –ø–æ–ª–µ "Telegram" –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–±–µ–∑ @)
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ

üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /link
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π username –≤ –ø–æ—Ä—Ç–∞–ª–µ

üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
- –ü–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
- –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
- –í–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: /status
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Ç —Å–≤—è–∑–∞–Ω: /link
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
    
    try {
      await bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('Error handling /help command:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    
    let statusMessage = `üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
üì± –¢–∏–ø —á–∞—Ç–∞: ${chatType}
üÜî ID —á–∞—Ç–∞: ${chatId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    try {
      const chatRecord = await NotificationChat.findOne({ 
        where: { chatId: chatId.toString() } 
      });
      
      if (chatRecord) {
        statusMessage += `\n‚úÖ –ß–∞—Ç —Å–≤—è–∑–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π`;
        if (chatRecord.employee_id) {
          const employee = await Employee.findByPk(chatRecord.employee_id);
          if (employee) {
            statusMessage += `\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.first_name} ${employee.last_name}`;
          }
        }
      } else {
        statusMessage += `\n‚ö†Ô∏è –ß–∞—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π`;
        if (chatType === 'private') {
          statusMessage += `\nüí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è`;
        }
      }
    } catch (error) {
      console.error('Error checking chat status:', error);
      statusMessage += `\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞`;
    }
    
    try {
      await bot.sendMessage(chatId, statusMessage, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('Error handling /status command:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link
  bot.onText(/\/link/, async (msg) => {
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    const username = msg.from.username;
    
    if (chatType !== 'private') {
      const errorMessage = `‚ùå –ö–æ–º–∞–Ω–¥–∞ /link –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö

–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /link
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π username –≤ –ø–æ—Ä—Ç–∞–ª–µ`;
      
      try {
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      } catch (error) {
        console.error('Error handling /link command in group:', error);
      }
      return;
    }
    
    if (!username) {
      const errorMessage = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username
4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link —Å–Ω–æ–≤–∞`;
      
      try {
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      } catch (error) {
        console.error('Error handling /link command without username:', error);
      }
      return;
    }
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const success = await saveChatIdToDatabase(`@${username}`, chatId);
      
      if (success) {
        const successMessage = `‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!

üë§ Username: @${username}
üÜî ID —á–∞—Ç–∞: ${chatId}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @${username} –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–æ—Ä—Ç–∞–ª–µ Team-A.

üîê –î–ª—è –≤—Ö–æ–¥–∞:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ—Ä—Ç–∞–ª Team-A
2. –í –ø–æ–ª–µ "Telegram" –≤–≤–µ–¥–∏—Ç–µ: ${username}
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageBuffer = await createCorporateImage('–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
        await bot.sendPhoto(chatId, imageBuffer, {
          caption: successMessage,
          parse_mode: 'HTML',
          filename: 'bot-connected.png'
        });
      } else {
        const errorMessage = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å —á–∞—Ç

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
2. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—É.`;
        
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      }
    } catch (error) {
      console.error('Error handling /link command:', error);
      
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ —á–∞—Ç–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
      
      try {
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'HTML' });
      } catch (sendError) {
        console.error('Error sending error message:', sendError);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid
  bot.onText(/\/chatid/, async (msg) => {
    const chatId = msg.chat.id;
    const chatType = msg.chat.type;
    const chatName = msg.chat.title || `${msg.chat.first_name} ${msg.chat.last_name || ''}`.trim();
    
    const chatInfoMessage = `üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ

üÜî ID —á–∞—Ç–∞: ${chatId}
üìã –¢–∏–ø: ${chatType}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatName}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.from.username ? `@${msg.from.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
    
    try {
      await bot.sendMessage(chatId, chatInfoMessage, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('Error handling /chatid command:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  bot.on('polling_error', (error) => {
    console.error('Telegram bot polling error:', error);
  });

  bot.on('error', (error) => {
    console.error('Telegram bot error:', error);
  });
};

function getTelegramBot() {
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (botInstance) {
    return botInstance;
  }
  
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.log('Telegram bot token not found, bot will not be initialized');
    return null;
  }
  
  try {
    botInstance = new TelegramBot(token, { polling: true });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if (!isInitialized) {
      setupBotCommands(botInstance);
      setupBotHandlers(botInstance);
      isInitialized = true;
      console.log('Telegram bot initialized and handlers registered');
    }
    
    return botInstance;
  } catch (error) {
    console.error('Error initializing Telegram bot:', error);
    botInstance = null;
    isInitialized = false;
    return null;
  }
}

function stopTelegramBot() {
  if (botInstance) {
    console.log('Stopping Telegram bot...');
    try {
      botInstance.stopPolling();
      botInstance = null;
      isInitialized = false;
      console.log('Telegram bot stopped');
    } catch (error) {
      console.error('Error stopping Telegram bot:', error);
    }
  }
}

module.exports = { getTelegramBot, getTelegramUserAvatar, stopTelegramBot, createCorporateImage }; 