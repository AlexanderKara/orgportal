const express = require('express');
const router = express.Router();
const notificationController = require('../controllers/notificationController');
const { authMiddleware } = require('../middleware/auth');
const Employee = require('../models/Employee');
const NotificationChat = require('../models/NotificationChat');

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
router.use(authMiddleware);

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.get('/', notificationController.getNotifications);

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.get('/active', notificationController.getActiveNotifications);

// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
router.get('/:id', notificationController.getNotification);

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
router.post('/', notificationController.createNotification);

// –û–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
router.put('/:id', notificationController.updateNotification);

// –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
router.delete('/:id', notificationController.deleteNotification);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
router.post('/token-received', async (req, res) => {
  try {
    const { recipientId, tokenData } = req.body;

    if (!recipientId || !tokenData) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: recipientId, tokenData' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipient = await Employee.findByPk(recipientId);
    if (!recipient) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤ (–ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –±–æ—Ç)
    const notificationChat = await NotificationChat.findOne({
      where: { employeeId: recipientId, isActive: true }
    });

    if (!notificationChat) {
      return res.json({
        success: true,
        message: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (notificationChat.personalNotificationsDisabled) {
      return res.json({
        success: true,
        message: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let message = `üéØ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω!\n\n`;
    message += `üè∑Ô∏è –¢–∏–ø: ${tokenData.type}\n`;
    message += `üíé –ë–∞–ª–ª—ã: ${tokenData.points}\n`;
    message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${tokenData.description}\n`;
    
    if (tokenData.comment) {
      message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${tokenData.comment}\n`;
    }
    
    if (tokenData.senderName) {
      message += `üë§ –û—Ç: ${tokenData.senderName}\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
    const notificationService = require('../services/notificationService');
    await notificationService.sendPersonalNotification(
      notificationChat.chatId,
      message,
      tokenData.image ? {
        type: 'image',
        url: tokenData.image.startsWith('http') ? tokenData.image : `${process.env.BACKEND_URL || 'http://localhost:5000'}${tokenData.image}`
      } : null
    );

    res.json({
      success: true,
      message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('Error sending token received notification:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' 
    });
  }
});

module.exports = router; 